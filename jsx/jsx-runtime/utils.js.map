{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"AAGA,MAAM,CAAC,MAAM,MAAM,GAAG,CAAC,KAAY,EAAE,OAAqB,EAAE,EAAE;IAC1D,OAAO,WAAW,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;AACvC,CAAC,CAAC;AAEF,MAAM,WAAW,GAAG,CAChB,KAAY,EACZ,OAAqB,EACpB,EAAE;IACH,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC3C,IAAI,QAAQ,IAAI,OAAO,IAAI,QAAQ,IAAI,OAAO,EAAE;QAC5C,MAAM,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;QACxD,IACI,OAAO,CAAC,QAAQ;YAChB,KAAK,IAAI,UAAU;YACnB,OAAO,UAAU,CAAC,GAAG,KAAK,UAAU,EACtC;YACE,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;gBAC3B,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gBAC9B,UAA2C,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC5D,CAAC,CAAC,CAAC;SACN;QACD,OAAO,UAAU,CAAC;KACrB;IACD,OAAO,WAAW,CAAC,KAAK,EAAE,OAAuB,CAAC,CAAC;AACvD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,SAAS,GAAG,CACrB,KAAY,EACZ,GAA6B,EAC7B,EAAgB,EAChB,UAAyC,EAC3C,EAAE;IACA,MAAM,OAAO,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;IACjC,IAAI,QAAQ,IAAI,OAAO,IAAI,QAAQ,IAAI,OAAO,EAAE;QAC5C,OAAO,CAAC,MAAM,CAAC,UAAU,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC;QACrC,IACI,EAAE,CAAC,QAAQ;YACX,KAAK,IAAI,UAAU;YACnB,OAAO,UAAU,CAAC,GAAG,KAAK,UAAU,EACtC;YACE,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE;gBAC3B,MAAM,OAAO,GACT,UACH,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACb,SAAS,CAAC,KAAK,EAAE,SAAS,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;SACN;QACD,OAAO,UAAU,CAAC;KACrB;IACD,SAAS,CAAC,KAAK,EAAE,SAAS,EAAE,OAAuB,EAAE,UAAU,CAAC,CAAC;AACrE,CAAC,CAAC","sourcesContent":["import { Scene } from \"phaser\";\nimport { Element } from \"./Element\";\n\nexport const create = (scene: Scene, element: Element<any>) => {\n    return evaluateTag(scene, element);\n};\n\nconst evaluateTag = <P extends object, T extends Phaser.GameObjects.GameObject>(\n    scene: Scene,\n    element: Element<any>\n): T => {\n    const creator = element.tag(element.props);\n    if (\"update\" in creator && \"create\" in creator) {\n        const gameObject = creator.create(scene, element.props);\n        if (\n            element.children &&\n            \"add\" in gameObject &&\n            typeof gameObject.add === \"function\"\n        ) {\n            element.children.forEach((c) => {\n                const child = create(scene, c);\n                (gameObject as Phaser.GameObjects.Container).add(child);\n            });\n        }\n        return gameObject;\n    }\n    return evaluateTag(scene, creator as Element<any>);\n};\n\nexport const reconcile = (\n    scene: Scene,\n    old: Element<any> | undefined,\n    nu: Element<any>,\n    gameObject: Phaser.GameObjects.GameObject\n) => {\n    const creator = nu.tag(nu.props);\n    if (\"update\" in creator && \"create\" in creator) {\n        creator.update(gameObject, nu.props);\n        if (\n            nu.children &&\n            \"add\" in gameObject &&\n            typeof gameObject.add === \"function\"\n        ) {\n            nu.children.forEach((c, idx) => {\n                const childGo = (\n                    gameObject as Phaser.GameObjects.Container\n                ).getAt(idx);\n                reconcile(scene, undefined, c, childGo);\n            });\n        }\n        return gameObject;\n    }\n    reconcile(scene, undefined, creator as Element<any>, gameObject);\n};\n"]}