{"version":3,"file":"createRoot.js","sourceRoot":"","sources":["../src/createRoot.ts"],"names":[],"mappings":"AAIA,MAAM,CAAC,MAAM,MAAM,GAAG,CAAC,KAAY,EAAE,OAAgB,EAAE,EAAE;IACrD,MAAM,OAAO,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC;IAErC,MAAM,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;IACxD,IACI,OAAO,CAAC,QAAQ;QAChB,KAAK,IAAI,UAAU;QACnB,OAAO,UAAU,CAAC,GAAG,KAAK,UAAU,EACtC;QACE,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;YAC3B,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAC9B,UAA2C,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;KACN;IAED,OAAO,UAAU,CAAC;AACtB,CAAC,CAAC;AAEF,MAAM,WAAW,GAAG,CAChB,OAAgB,EACO,EAAE;IACzB,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC1C,IAAI,QAAQ,IAAI,MAAM,IAAI,QAAQ,IAAI,MAAM,EAAE;QAC1C,OAAO,MAAM,CAAC;KACjB;IACD,OAAO,WAAW,CAAC,MAAM,CAAC,CAAC;AAC/B,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,SAAS,GAAG,CACrB,GAAY,EACZ,EAAW,EACX,UAAyC,EAC3C,EAAE;IACA,MAAM,OAAO,GAAG,WAAW,CAAC,EAAE,CAAC,CAAC;IAChC,gDAAgD;IAChD,OAAO,CAAC,MAAM,CAAC,UAAU,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC;IACrC,IAAI,UAAU,YAAY,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE;QACpD,MAAM,SAAS,GAAiC,UAAU,CAAC;QAC3D,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,CAC9B,SAAS,CAAC,SAAgB,EAAE,CAAC,EAAE,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CACzD,CAAC;KACL;IACD,uDAAuD;AAC3D,CAAC,CAAC","sourcesContent":["import { Scene } from \"phaser\";\nimport { Element } from \"./Element\";\nimport { GameObjectFactory } from \"./gameObjectFactory\";\n\nexport const create = (scene: Scene, element: Element) => {\n    const creator = evaluateTag(element);\n\n    const gameObject = creator.create(scene, element.props);\n    if (\n        element.children &&\n        \"add\" in gameObject &&\n        typeof gameObject.add === \"function\"\n    ) {\n        element.children.forEach((c) => {\n            const child = create(scene, c);\n            (gameObject as Phaser.GameObjects.Container).add(child);\n        });\n    }\n\n    return gameObject;\n};\n\nconst evaluateTag = <P extends object, T extends Phaser.GameObjects.GameObject>(\n    element: Element\n): GameObjectFactory<P, T> => {\n    const result = element.tag(element.props);\n    if (\"update\" in result && \"create\" in result) {\n        return result;\n    }\n    return evaluateTag(result);\n};\n\nexport const reconcile = (\n    old: Element,\n    nu: Element,\n    gameObject: Phaser.GameObjects.GameObject\n) => {\n    const creator = evaluateTag(nu);\n    // TODO remove old if it isn't the same creator?\n    creator.update(gameObject, nu.props);\n    if (gameObject instanceof Phaser.GameObjects.Container) {\n        const container: Phaser.GameObjects.Container = gameObject;\n        nu.children?.forEach((c, index) =>\n            reconcile(undefined as any, c, container.getAt(index))\n        );\n    }\n    // TOD diff children by creator and otherwise index/key\n};\n"]}